{"version":3,"sources":["../src/index.ts","../src/crud-service.ts"],"names":["src_exports","__export","CRUDService","__toCommonJS","import_edgedb","config","data","tx","newId","id","field","value","obj","fields","createClient","attemptNo"],"mappings":"6iBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iBAAAE,EAAA,iDAAAC,EAAAH,GCAA,IAAAI,EAA+D,qBAE/DA,EAA6B,kBAGhBF,EAAN,KAWL,CAOD,YACSG,EAQP,CARO,YAAAA,EAmCT,YAAS,MAAOC,GACR,MAAM,KAAK,OAAO,YAAY,MAAOC,GAAO,CAClD,GAAM,CAAE,GAAIC,CAAM,EAAI,MAAM,KAAK,EAAE,OAAO,KAAK,MAAOF,CAAW,EAAE,IAAIC,CAAE,EAEzE,OAAQ,MAAM,KAAK,EACjB,OAAO,KAAK,MAAO,KAAO,CAC1B,GAAG,KAAK,QACR,cAAe,CACd,GAAIC,CACL,CACD,EAAE,EACD,IAAID,CAAE,CACT,CAAC,EAGF,gBAAa,MAAOE,EAAYH,IAOvB,MANM,KAAK,EAAE,OAAO,KAAK,MAAO,KAAO,CAC9C,IAAKA,EACL,cAAe,CACd,GAAIG,CACL,CACD,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,aAAU,SAID,MAHM,KAAK,EAAE,OAAO,KAAK,MAAO,KAAO,CAC9C,GAAG,KAAK,OACT,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,cAAW,MAAOA,GAOT,MANM,KAAK,EAAE,OAAO,KAAK,MAAO,KAAO,CAC9C,GAAG,KAAK,QACR,cAAe,CACd,GAAIA,CACL,CACD,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,gBAAa,MAAOA,GAMX,MALM,KAAK,EAAE,OAAO,KAAK,MAAO,KAAO,CAC9C,cAAe,CACd,GAAIA,CACL,CACD,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,iBAAc,MAAiCC,EAAcC,IAKpD,MAJM,KAAK,EAAE,OAAO,KAAK,MAAQC,IAAS,CACjD,GAAG,KAAK,QACR,cAAe,KAAK,EAAE,GAAGA,EAAIF,CAAK,EAAG,IAAK,KAAK,EAAE,KAAKC,CAAK,CAAC,CAC7D,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,oBAAiB,MAAiCD,EAAcC,IAKvD,MAJM,KAAK,EAAE,OAAO,KAAK,MAAQC,IAAS,CACjD,GAAG,KAAK,QACR,OAAQ,KAAK,EAAE,GAAGA,EAAIF,CAAK,EAAG,IAAK,KAAK,EAAE,KAAKC,CAAK,CAAC,CACtD,EAAE,EACkB,IAAI,KAAK,MAAM,EAGpC,kBAAe,MAAiCE,GAKvC,MAJM,KAAK,EAAE,OAAO,KAAK,MAAO,KAAO,CAC9C,GAAG,KAAK,QACR,cAAeA,CAChB,EAAE,EACkB,IAAI,KAAK,MAAM,EAlG/BR,EAAO,SAEJ,YAAaA,EAAO,SACzB,KAAK,UAAS,EAAAS,SAAaT,EAAO,MAAM,GAGzC,KAAK,OAAS,KAAK,OACjB,WAAW,CACX,iCAAkC,WAAS,KAAK,CAAE,QAAS,EAAG,CAAC,EAC/D,eAAgB,aACjB,CAAC,EACA,iBAAiB,CACjB,SAAU,EACV,QAAUU,GAEF,GAAKA,EAAY,IAAM,KAAK,OAAO,EAAI,GAEhD,CAAC,GAGH,KAAK,EAAI,KAAK,OAAO,OACrB,KAAK,SAAW,KAAK,OAAO,KAC5B,KAAK,MAAQ,KAAK,EAAE,KAAK,QAAQ,EACjC,KAAK,QAAU,KAAK,MAAM,GAAG,CAC9B,CA4ED","sourcesContent":["export * from './crud-service';\n","import createClient, { Client, ConnectOptions, Duration } from 'edgedb'\n\nexport { createClient } from 'edgedb'\n\n// Class which implements CRUD operations for a given type with EdgeDB objects\nexport class CRUDService<\n\t/** \"types\" object exported from interfaces */\n\tAllTypes extends any,\n\t// @ts-expect-error\n\tTypeName extends keyof Omit<AllTypes['default'], 'Timestampable'> = keyof Omit<\n\t\t// @ts-expect-error\n\t\tAllTypes['default'],\n\t\t'Timestampable'\n\t>,\n\t// @ts-expect-error\n\tType extends AllTypes['default'][TypeName] = AllTypes['default'][TypeName]\n> {\n\te: any\n\ttypeName: TypeName\n\teType: any\n\teFields: any\n\tclient: Client\n\n\tconstructor(\n\t\tprivate config: {\n\t\t\t/** Ready EdgeDB client or options for instantialization */\n\t\t\tclient?: Client | ConnectOptions\n\t\t\t/** Name of EdgeDB type */\n\t\t\ttype: TypeName\n\t\t\t/** Default object exported from edgeql-js */\n\t\t\tedgedb: any\n\t\t}\n\t) {\n\t\tif (config.client) {\n\t\t\t// if is client key has 'options', it means it's a Client\n\t\t\tif (!('options' in config.client)) {\n\t\t\t\tthis.client = createClient(config.client)\n\t\t\t}\n\n\t\t\tthis.client = this.client\n\t\t\t\t.withConfig({\n\t\t\t\t\tsession_idle_transaction_timeout: Duration.from({ seconds: 10 }),\n\t\t\t\t\tallow_bare_ddl: 'AlwaysAllow',\n\t\t\t\t})\n\t\t\t\t.withRetryOptions({\n\t\t\t\t\tattempts: 3,\n\t\t\t\t\tbackoff: (attemptNo: number) => {\n\t\t\t\t\t\t// exponential backoff\n\t\t\t\t\t\treturn 2 ** attemptNo * 100 + Math.random() * 100\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t}\n\n\t\tthis.e = this.config.edgedb\n\t\tthis.typeName = this.config.type\n\t\tthis.eType = this.e[this.typeName]\n\t\tthis.eFields = this.eType['*']\n\t}\n\n\tcreate = async (data: Partial<Omit<Type, 'id'>>) => {\n\t\treturn await this.client.transaction(async (tx) => {\n\t\t\tconst { id: newId } = await this.e.insert(this.eType, data as any).run(tx)\n\n\t\t\treturn (await this.e\n\t\t\t\t.select(this.eType, () => ({\n\t\t\t\t\t...this.eFields,\n\t\t\t\t\tfilter_single: {\n\t\t\t\t\t\tid: newId,\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t.run(tx)) as Type\n\t\t})\n\t}\n\n\tupdateById = async (id: string, data: Partial<Type>) => {\n\t\tconst query = this.e.update(this.eType, () => ({\n\t\t\tset: data,\n\t\t\tfilter_single: {\n\t\t\t\tid: id,\n\t\t\t},\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type\n\t}\n\n\tfindAll = async () => {\n\t\tconst query = this.e.select(this.eType, () => ({\n\t\t\t...this.eFields,\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type[]\n\t}\n\n\tfindById = async (id: string) => {\n\t\tconst query = this.e.select(this.eType, () => ({\n\t\t\t...this.eFields,\n\t\t\tfilter_single: {\n\t\t\t\tid: id,\n\t\t\t},\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type\n\t}\n\n\tdeleteById = async (id: string) => {\n\t\tconst query = this.e.delete(this.eType, () => ({\n\t\t\tfilter_single: {\n\t\t\t\tid: id,\n\t\t\t},\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type\n\t}\n\n\tfindByField = async <Field extends keyof Type>(field: Field, value: Type[Field]) => {\n\t\tconst query = this.e.select(this.eType, (obj) => ({\n\t\t\t...this.eFields,\n\t\t\tfilter_single: this.e.op(obj[field], '=', this.e.uuid(value)),\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type\n\t}\n\n\tfindAllByField = async <Field extends keyof Type>(field: Field, value: Type[Field]) => {\n\t\tconst query = this.e.select(this.eType, (obj) => ({\n\t\t\t...this.eFields,\n\t\t\tfilter: this.e.op(obj[field], '=', this.e.uuid(value)),\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type[]\n\t}\n\n\tfindByFields = async <Field extends keyof Type>(fields: { [key in Field]: Type[Field] }) => {\n\t\tconst query = this.e.select(this.eType, () => ({\n\t\t\t...this.eFields,\n\t\t\tfilter_single: fields,\n\t\t}))\n\t\treturn (await query.run(this.client)) as Type\n\t}\n}\n\nexport default CRUDService\n"]}